// <auto-generated />
using System;
using FinalProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalProject.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinalProject.Model.AccountRequest", b =>
                {
                    b.Property<int>("requestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("requestId"));

                    b.Property<string>("documentUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uploadDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("requestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("FinalProject.Models.Account", b =>
                {
                    b.Property<long>("accNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("accNo"));

                    b.Property<int>("accountType")
                        .HasColumnType("int");

                    b.Property<double>("balance")
                        .HasColumnType("float");

                    b.Property<long>("customerId")
                        .HasColumnType("bigint");

                    b.HasKey("accNo");

                    b.HasIndex("customerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FinalProject.Models.Admin", b =>
                {
                    b.Property<long>("adminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("adminId"));

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("adminId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("FinalProject.Models.Customer", b =>
                {
                    b.Property<long>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("customerId"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("customerId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FinalProject.Models.InterestRate", b =>
                {
                    b.Property<int>("rateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rateId"));

                    b.Property<int>("interestRate")
                        .HasColumnType("int");

                    b.HasKey("rateId");

                    b.ToTable("InterestRate");
                });

            modelBuilder.Entity("FinalProject.Models.Query", b =>
                {
                    b.Property<long>("queryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("queryId"));

                    b.Property<string>("adminSolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("adminid")
                        .HasColumnType("bigint");

                    b.Property<long>("customerId")
                        .HasColumnType("bigint");

                    b.Property<string>("userQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("queryId");

                    b.HasIndex("adminid");

                    b.HasIndex("customerId");

                    b.ToTable("Query");
                });

            modelBuilder.Entity("FinalProject.Models.Role", b =>
                {
                    b.Property<long>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("roleId"));

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FinalProject.Models.Transaction", b =>
                {
                    b.Property<long>("transactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("transactionId"));

                    b.Property<long>("accNo")
                        .HasColumnType("bigint");

                    b.Property<long>("accountaccNo")
                        .HasColumnType("bigint");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("transactionType")
                        .HasColumnType("int");

                    b.HasKey("transactionId");

                    b.HasIndex("accountaccNo");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinalProject.Models.User", b =>
                {
                    b.Property<long>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("userId"));

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("roleId")
                        .HasColumnType("bigint");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.HasIndex("roleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FinalProject.Models.Account", b =>
                {
                    b.HasOne("FinalProject.Models.Customer", "customer")
                        .WithMany("accounts")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("FinalProject.Models.Admin", b =>
                {
                    b.HasOne("FinalProject.Models.User", "user")
                        .WithOne("admin")
                        .HasForeignKey("FinalProject.Models.Admin", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("FinalProject.Models.Customer", b =>
                {
                    b.HasOne("FinalProject.Models.User", "user")
                        .WithOne("customer")
                        .HasForeignKey("FinalProject.Models.Customer", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("FinalProject.Models.Query", b =>
                {
                    b.HasOne("FinalProject.Models.Admin", "admin")
                        .WithMany("query")
                        .HasForeignKey("adminid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalProject.Models.Customer", "customer")
                        .WithMany("query")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("admin");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("FinalProject.Models.Transaction", b =>
                {
                    b.HasOne("FinalProject.Models.Account", "account")
                        .WithMany("transactions")
                        .HasForeignKey("accountaccNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("FinalProject.Models.User", b =>
                {
                    b.HasOne("FinalProject.Models.Role", "role")
                        .WithMany("user")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("FinalProject.Models.Account", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("FinalProject.Models.Admin", b =>
                {
                    b.Navigation("query");
                });

            modelBuilder.Entity("FinalProject.Models.Customer", b =>
                {
                    b.Navigation("accounts");

                    b.Navigation("query");
                });

            modelBuilder.Entity("FinalProject.Models.Role", b =>
                {
                    b.Navigation("user");
                });

            modelBuilder.Entity("FinalProject.Models.User", b =>
                {
                    b.Navigation("admin")
                        .IsRequired();

                    b.Navigation("customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
